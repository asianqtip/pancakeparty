{"version":3,"file":"recipe.js","sourceRoot":"","sources":["../../src/routes/recipe.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,iCAAoC;AACpC,qFAA+D;AAC/D,IAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;AAG7C;IAAiC,+BAAS;IA4CtC;eACI,iBAAO;IACX,CAAC;IA5Ca,kBAAM,GAApB,UAAqB,MAAc;QAC/B,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,UAAC,GAAY,EAAE,GAAa;YAC9C,IAAI,GAAG,CAAC,eAAe,EAAE,EAAE;gBACvB,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAG,OAAO,EAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAE,CAAC;aACxF;iBAAM;gBAEH,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,0DAA0D,CAAC,CAAC;gBAChF,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;aACzB;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,UAAC,GAAY,EAAE,GAAa;YACpD,IAAI,GAAG,CAAC,eAAe,EAAE,EAAE;gBACvB,0BAAgB,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aACxC;iBAAM;gBACH,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;aACzB;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,UAAC,GAAY,EAAE,GAAa;YAC5D,IAAG,GAAG,CAAC,eAAe,EAAE,EAAE;gBACtB,0BAAgB,CAAC,YAAY,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;aAC1C;iBAAM;gBACH,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;aACzB;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAE,UAAC,GAAY,EAAE,GAAa;YACzD,IAAG,GAAG,CAAC,eAAe,EAAE,EAAE;gBACtB,0BAAgB,CAAC,aAAa,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;aAC3C;iBAAM;gBACH,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;aACzB;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAC,GAAY,EAAE,GAAa;YAC1D,IAAG,GAAG,CAAC,eAAe,EAAE,EAAE;gBACtB,0BAAgB,CAAC,UAAU,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC;aACxC;iBAAM;gBACH,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;aACzB;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAKL,kBAAC;AAAD,CAAC,AA/CD,CAAiC,iBAAS,GA+CzC;AA/CY,kCAAW","sourcesContent":["\r\nimport { Request, Response, Router } from \"express\";\r\nimport { BaseRoute } from \"./route\";\r\nimport RecipeController from \"../controllers/RecipeController\";\r\nconst ObjectId = require('mongodb').ObjectId;\r\n\r\n\r\nexport class RecipeRoute extends BaseRoute {\r\n\r\n    public static create(router: Router) {\r\n        router.get('/recipe', (req: Request, res: Response) => {\r\n            if (req.isAuthenticated()) {\r\n                res.render(\"recipe\", {errors: req.flash('errors'),  success:req.flash('success') } );\r\n            } else {\r\n\r\n                req.flash(\"errors\", 'You are not authorized to access that page. Please login');\r\n                res.redirect('/login')\r\n            }\r\n        });\r\n\r\n        router.get('/recipe/:name', (req: Request, res: Response) => {\r\n            if (req.isAuthenticated()) {\r\n                RecipeController.getRecipe(req, res);\r\n            } else {\r\n                res.redirect('/login')\r\n            }\r\n        });\r\n        router.post('/recipe/:name/delete', (req: Request, res: Response) => {\r\n            if(req.isAuthenticated()) {\r\n                RecipeController.deleteRecipe(req,res);\r\n            } else {\r\n                res.redirect('/login')\r\n            }\r\n        });\r\n        router.get('/recipe/:name/edit', (req: Request, res: Response) => {\r\n            if(req.isAuthenticated()) {\r\n                RecipeController.geteditRecipe(req,res);\r\n            } else {\r\n                res.redirect('/login')\r\n            }\r\n        });\r\n        router.post('/recipe/:name/edit', (req: Request, res: Response) => {\r\n            if(req.isAuthenticated()) {\r\n                RecipeController.editRecipe(req,res);\r\n            } else {\r\n                res.redirect('/login')\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n"]}