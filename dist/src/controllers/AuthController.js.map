{"version":3,"file":"AuthController.js","sourceRoot":"","sources":["../../../src/controllers/AuthController.ts"],"names":[],"mappings":";;AAKA;;;;;GAKG;AACH;IAAA;IA+BA,CAAC;IA7BG;;;;QAII;IACI,oBAAK,GAAZ,UAAc,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC1D,IAAM,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;QACpC,IAAA,aAAiC,EAA/B,sBAAQ,EAAE,sBAAqB,CAAC;QACtC,QAAQ,CAAC,OAAO,EAAE;aACb,IAAI,CAAC,UAAC,EAAO;YACV,OAAO,EAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACpD,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,KAAS;YACZ,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAA1B,CAA0B,CAAC,CAAC;YAC1D,IAAG,IAAI,IAAI,IAAI,EAAC;gBACZ,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;gBAC1C,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,EAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAC/D;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;YAC1C,OAAO,GAAG,CAAC,QAAQ,CAAE,GAAG,CAAC,CAAC;QAE9B,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,GAAQ;YACZ,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC7B,OAAO,GAAG,CAAC,QAAQ,CAAE,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;IAEV,CAAC;IACL,qBAAC;AAAD,CAAC,AA/BD,IA+BC;AACD,kBAAe,cAAc,CAAC","sourcesContent":["import {NextFunction, Request, Response} from \"express\";\r\nimport crypto from \"crypto\";\r\nimport { User } from \"../types\";\r\nimport {Db} from \"mongodb\";\r\n\r\n/** AuthController()\r\n * Handles user login and authentication.\r\n * Currently, login is authenticated by searching the db for a matching username.\r\n * To be implemented: SHA1 password hashing and verification.\r\n *\r\n**/\r\nclass AuthController{\r\n\r\n    /** login()\r\n     * Connects to database to find data matching the username.\r\n     * Successful login results in a redirection to the homepage.\r\n     * Otherwise, will be redirected to the login page. (input form blank)\r\n     **/\r\n     static login (req: Request, res: Response, next: NextFunction) {\r\n        const DbClient = require(\"../DbClient\");\r\n        let { username, password } = req.body;\r\n        DbClient.connect()\r\n            .then((db: any) => {\r\n                return db!.collection(\"Users\").find().toArray();\r\n            })\r\n            .then((Users:any) => {\r\n                let user = Users.find(user => user.UserName === username);\r\n                if(user == null){\r\n                    req.flash('error', 'User does not exist');\r\n                    return res.render('login',{ messages: req.flash('error') });\r\n                }\r\n                console.log(user);\r\n                req.flash('success', 'Successful Login!');\r\n                return res.redirect( \"/\");\r\n\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"No user found\");\r\n                return res.redirect( \"/login\");\r\n            })\r\n\r\n    }\r\n}\r\nexport default AuthController;"]}