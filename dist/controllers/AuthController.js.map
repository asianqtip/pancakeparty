{"version":3,"file":"AuthController.js","sourceRoot":"","sources":["../../src/controllers/AuthController.ts"],"names":[],"mappings":";;;;;AACA,sDAAgC;AAEhC,8BAA4B;AAC5B;;;;;GAKG;AACH;IAAA;IA0BA,CAAC;IAxBG;;;;QAII;IACI,oBAAK,GAAZ,UAAc,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC1D,kBAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,IAAoB;YAC9E,IAAI,GAAG,EAAE;gBAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;aAAE;YAC9B,IAAI,CAAC,IAAI,EAAE;gBACP,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC7C;YACD,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,UAAC,GAAG;gBAChB,IAAI,GAAG,EAAE;oBAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;iBAAE;gBAC9B,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,kCAAkC,CAAE,CAAC;gBAC1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAI,CAAC,OAAQ,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACvB,CAAC;IACM,qBAAM,GAAb,UAAe,GAAY,EAAE,GAAa;QACrC,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,mCAAmC,CAAE,CAAC;QAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAI,CAAC,OAAQ,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC;IAC7D,CAAC;IACL,qBAAC;AAAD,CAAC,AA1BD,IA0BC;AACD,kBAAe,cAAc,CAAC","sourcesContent":["import {NextFunction, Request, Response} from \"express\";\r\nimport passport from \"passport\";\r\nimport { IVerifyOptions } from \"passport-local\";\r\nimport \"../config/passport\";\r\n/** AuthController()\r\n * Handles user login and authentication.\r\n * Currently, login is authenticated by searching the db for a matching username.\r\n * To be implemented: SHA1 password hashing and verification.\r\n *\r\n**/\r\nclass AuthController{\r\n\r\n    /** login()\r\n     * Connects to database to find data matching the username.\r\n     * Successful login results in a redirection to the homepage.\r\n     * Otherwise, will be redirected to the login page. (input form blank)\r\n     **/\r\n     static login (req: Request, res: Response, next: NextFunction) {\r\n        passport.authenticate(\"local\", { session: true }, (err, user, info: IVerifyOptions) => {\r\n            if (err) { return next(err); }\r\n            if (!user) {\r\n                req.flash(\"errors\", info.message);\r\n                return res.status(400).redirect(\"/login\");\r\n            }\r\n            req.login(user, (err) => {\r\n                if (err) { return next(err); }\r\n                req.flash(\"success\", \"You have successfully logged in.\" );\r\n                res.status(200).redirect(req!.session!.returnTo || \"/\");\r\n            });\r\n        })(req, res, next);\r\n    }\r\n    static logout (req: Request, res: Response){\r\n         req.logout();\r\n         req.flash(\"success\", \"You have successfully logged out.\" );\r\n         res.status(200).redirect(req!.session!.returnTo || \"/\");\r\n    }\r\n}\r\nexport default AuthController;\r\n"]}